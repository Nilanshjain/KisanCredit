# =============================================================================
# Docker Compose Configuration for KisanCredit Stack
# =============================================================================
version: '3.8'

services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: kisancredit-postgres
    environment:
      POSTGRES_USER: kisancredit
      POSTGRES_PASSWORD: kisancredit_password
      POSTGRES_DB: kisancredit
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kisancredit"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: kisancredit-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # MLflow Tracking Server
  # =============================================================================
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: kisancredit-mlflow
    command: >
      mlflow server
      --backend-store-uri postgresql://kisancredit:kisancredit_password@postgres:5432/kisancredit
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    volumes:
      - mlflow_data:/mlflow
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # KisanCredit API
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kisancredit-api
    environment:
      - APP_NAME=KisanCredit
      - ENVIRONMENT=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://kisancredit:kisancredit_password@postgres:5432/kisancredit
      - DATABASE_URL_SYNC=postgresql://kisancredit:kisancredit_password@postgres:5432/kisancredit
      - REDIS_URL=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_PATH=/app/models/profitability_model_latest.pkl
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=900
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: kisancredit-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - api
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # Grafana Dashboards
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: kisancredit-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - kisancredit-network
    restart: unless-stopped

  # =============================================================================
  # PgAdmin (Optional - Database Management)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: kisancredit-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@kisancredit.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - kisancredit-network
    restart: unless-stopped
    profiles:
      - tools

# =============================================================================
# Networks
# =============================================================================
networks:
  kisancredit-network:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
